{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Michael Debertol",
  "language": "en",
  "home_page_url": "https://blog.debertol.com/",
  "feed_url": "https://blog.debertol.com/feed/feed.json",
  "description": "Blog about Flutter and other stuff",
  "author": {
    "name": "Michael Debertol",
    "url": "https://blog.debertol.com/about/"
  },
  "items": [{
      "id": "https://blog.debertol.com/posts/riverpod-refresh/",
      "url": "https://blog.debertol.com/posts/riverpod-refresh/",
      "title": "Refresh all FutureProvider.family or multiple providers",
      "content_html": "<p>I recently wondered how you could easily refresh a <code>FutureProvider</code>.\nHad I read the docs, I would have known of <a href=\"https://pub.dev/documentation//flutter_riverpod/latest/flutter_riverpod/WidgetRef/refresh.html\"><code>ref.refresh</code></a>.\nNonetheless, the solution I came up with is a bit more general and can be applied even for <code>FutureProvider.family</code> or multiple <code>FutureProvider</code>s.</p>\n<h2 id=\"creating-a-refreshprovider\" tabindex=\"-1\"><a class=\"direct-link\" href=\"https://blog.debertol.com/posts/riverpod-refresh/#creating-a-refreshprovider\">Creating a <code>refreshProvider</code></a></h2>\n<p>The main idea is to create a <code>refreshProvider</code> that other providers can watch.\nWhen the <code>refreshProvider</code> refreshes, all other providers will be refreshed too.</p>\n<p>One way of creating such a <code>refreshProvider</code> is to use a <code>ChangeNotifierProvider</code>:</p>\n<pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:flutter/foundation.dart'</span></span><span class=\"token punctuation\">;</span><br /><span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:flutter_riverpod/flutter_riverpod.dart'</span></span><span class=\"token punctuation\">;</span><br /><br /><span class=\"token keyword\">class</span> <span class=\"token class-name\">RefreshNotifier</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ChangeNotifier</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">void</span> <span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token function\">notifyListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token keyword\">final</span> refreshProvider <span class=\"token operator\">=</span> <span class=\"token class-name\">ChangeNotifierProvider</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RefreshNotifier</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><br />  <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token class-name\">RefreshNotifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br /><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Other providers can watch it, for example:</p>\n<pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">final</span> itemProvider <span class=\"token operator\">=</span> <span class=\"token class-name\">FutureProvider</span><span class=\"token punctuation\">.</span>family<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> int<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><br />  <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span><br />    ref<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>refreshProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token keyword\">final</span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchItems</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token keyword\">return</span> items<span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br /><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>And here's the code needed to trigger a refresh:</p>\n<pre class=\"language-dart\"><code class=\"language-dart\">ref<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>refreshProvider<span class=\"token punctuation\">.</span>notifier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>That's it! But keep in mind: For simpler usecases <code>ref.refresh</code> is the better choice.</p>\n",
      "date_published": "2022-06-16T00:00:00Z"
    },{
      "id": "https://blog.debertol.com/posts/riverpod-debounce/",
      "url": "https://blog.debertol.com/posts/riverpod-debounce/",
      "title": "Debouncing a FutureProvider",
      "content_html": "<p>Note: This is mostly copied from an <a href=\"https://github.com/rrousselGit/riverpod/blob/master/examples/marvel/lib/src/screens/home.dart\">official example</a>.</p>\n<h2 id=\"when-to-debounce\" tabindex=\"-1\"><a class=\"direct-link\" href=\"https://blog.debertol.com/posts/riverpod-debounce/#when-to-debounce\">When to Debounce</a></h2>\n<p>Debouncing can be useful whenever a provider relies on user input that can change quickly, like a search query.</p>\n<h2 id=\"how-to-debounce\" tabindex=\"-1\"><a class=\"direct-link\" href=\"https://blog.debertol.com/posts/riverpod-debounce/#how-to-debounce\">How to Debounce</a></h2>\n<p>Let's look right at the code:</p>\n<pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">/// This exception indicates that a request has been aborted.</span><br /><span class=\"token keyword\">class</span> <span class=\"token class-name\">AbortedException</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br /><br /><span class=\"token keyword\">final</span> itemProvider <span class=\"token operator\">=</span> <span class=\"token class-name\">FutureProvider</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><br />  <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token comment\">// Get the search query that the user entered</span><br />    <span class=\"token keyword\">final</span> query <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>queryProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />    <span class=\"token comment\">// If this provider is destroyed (i.e. a new provider for a different request is created),</span><br />    <span class=\"token comment\">// we should abort this request.</span><br />    <span class=\"token keyword\">var</span> shouldAbort <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br />    ref<span class=\"token punctuation\">.</span><span class=\"token function\">onDispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />      shouldAbort <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br />    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token keyword\">await</span> <span class=\"token class-name\">Future</span><span class=\"token punctuation\">.</span><span class=\"token function\">delayed</span><span class=\"token punctuation\">(</span>_debounceDuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldAbort<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />      <span class=\"token keyword\">throw</span> <span class=\"token class-name\">AbortedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token punctuation\">}</span><br />    <br />    <span class=\"token comment\">// Fetch the items</span><br />    <span class=\"token keyword\">return</span> <span class=\"token function\">fetchItems</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br /><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><a href=\"https://pub.dev/documentation/riverpod/latest/riverpod/Ref/onDispose.html\"><code>ref.onDispose</code></a> allows us to register a callback that is triggered whenever a provider is about to be destroyed.\nThe provider will be destroyed whenever a new provider is created for a different query. If, after a delay, we notice that the provider has been destroyed, we can abort the request.\nAborting can be done by throwing an <code>Exception</code> from the provider. In this example we're creating a custom <code>AbortedException</code> class that makes\nour code a bit more readable and makes it clear that we're throwing it to abort the request, not because of an actual error.\nSince at this point no one is waiting anymore for the provider that was just disposed, we can safely throw an <code>Exception</code> without it affecting the rest of the app.</p>\n<h2 id=\"creating-a-convenience-method\" tabindex=\"-1\"><a class=\"direct-link\" href=\"https://blog.debertol.com/posts/riverpod-debounce/#creating-a-convenience-method\">Creating a Convenience Method</a></h2>\n<p>We can extract the logic from above into a convenience method that we can reuse:</p>\n<pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">providerDebounce</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span> debounceDuration<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ref</span> ref<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">var</span> shouldAbort <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br />  ref<span class=\"token punctuation\">.</span><span class=\"token function\">onDispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    shouldAbort <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token keyword\">await</span> <span class=\"token class-name\">Future</span><span class=\"token punctuation\">.</span><span class=\"token function\">delayed</span><span class=\"token punctuation\">(</span>debounceDuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldAbort<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">throw</span> <span class=\"token class-name\">AbortedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span></code></pre>\n",
      "date_published": "2022-06-16T00:00:00Z"
    },{
      "id": "https://blog.debertol.com/posts/flutter-infinite-lists/",
      "url": "https://blog.debertol.com/posts/flutter-infinite-lists/",
      "title": "Displaying Paginated APIs as Infinite Lists",
      "content_html": "<p>While there are <a href=\"https://pub.dev/packages/infinite_scroll_pagination\">packages out there</a> that provide such functionality,\nfor the sake of this blog post we'll try to implement it ourselves, using only built-in Flutter widgets.</p>\n<p>I'll be using <code>riverpod</code> for managing the state, but it should be possible to use something else as well.</p>\n<h2 id=\"why-reimplement-something-if-there's-already-a-package\" tabindex=\"-1\"><a class=\"direct-link\" href=\"https://blog.debertol.com/posts/flutter-infinite-lists/#why-reimplement-something-if-there's-already-a-package\">Why Reimplement Something if There’s Already a Package?</a></h2>\n<p>Sometimes it's just easier.\nIn my case the package mentioned above would have required changes to make it work for my usecase,\nmeaning that I would have had to fork it possibly mantain that fork in the future.</p>\n<p>Also, I was looking for something a bit simpler. If I implement something for myself,\nI can focus on the feature I need; a package has to cover many different usecases and\nwill therefore be more complex to use.</p>\n<h2 id=\"what-features-do-we-need\" tabindex=\"-1\"><a class=\"direct-link\" href=\"https://blog.debertol.com/posts/flutter-infinite-lists/#what-features-do-we-need\">What Features Do We Need?</a></h2>\n<p>In this post we'll only explore very basic options:</p>\n<ul>\n<li>The list should load new items as they become visible</li>\n<li>While loading some kind of animation should be shown. We'll be using the <a href=\"https://pub.dev/packages/shimmer\">shimmer</a> package for this.</li>\n</ul>\n<h2 id=\"how-to-manage-state\" tabindex=\"-1\"><a class=\"direct-link\" href=\"https://blog.debertol.com/posts/flutter-infinite-lists/#how-to-manage-state\">How To Manage State?</a></h2>\n<p>As already mentioned, we're using <code>riverpod</code>, so our data will come from a <code>Provider</code>.\nIt's very convenient to use <code>FutureProvider.family</code> for our usecase.</p>\n<p>Let's take a look at our provider:</p>\n<pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">final</span> itemProvider <span class=\"token operator\">=</span>  <span class=\"token class-name\">FutureProvider</span><span class=\"token punctuation\">.</span>family<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> int<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><br />  <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">final</span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchItems</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token keyword\">return</span> items<span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br /><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /></code></pre>\n<p>You can add more features to this provider, like <a href=\"https://blog.debertol.com/posts/riverpod-refresh\">refresh functionality</a> or <a href=\"https://blog.debertol.com/posts/riverpod-debounce\">debouncing</a>.\nI'll write a short blog post about this later.</p>\n<h2 id=\"using-listview.custom\" tabindex=\"-1\"><a class=\"direct-link\" href=\"https://blog.debertol.com/posts/flutter-infinite-lists/#using-listview.custom\">Using <code>ListView.custom</code></a></h2>\n<p>Since we want to display a List of items, we'll probably want to look at <a href=\"https://api.flutter.dev/flutter/widgets/ListView-class.html\"><code>ListView</code></a>. Since we don't know all items\nbeforehand, let's take a closer look at <a href=\"https://api.flutter.dev/flutter/widgets/ListView/ListView.builder.html\"><code>ListView.builder</code></a>. Reading through its documentation we'll soon\ndiscover an issue: To display a list with a <strong>limited</strong> amount of items we have to provide <code>itemCount</code> - but it turns out we don't know the number of items at the beginning!\nThis is however only a minor problem: We'll have to use the lesser known <a href=\"https://api.flutter.dev/flutter/widgets/ListView/ListView.custom.html\"><code>ListView.custom</code></a> constructor,\nwhich allows us to signal that there are no more items by returning <code>null</code> from the item builder.</p>\n<p>The basic code will look like this:</p>\n<pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token class-name\">ListView</span><span class=\"token punctuation\">.</span><span class=\"token function\">custom</span><span class=\"token punctuation\">(</span><br />  childrenDelegate<span class=\"token punctuation\">:</span> <span class=\"token class-name\">SliverChildBuilderDelegate</span><span class=\"token punctuation\">(</span><br />    <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />      <span class=\"token comment\">// TODO: implement item builder</span><br />    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br />  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br /><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"implementing-the-item-builder\" tabindex=\"-1\"><a class=\"direct-link\" href=\"https://blog.debertol.com/posts/flutter-infinite-lists/#implementing-the-item-builder\">Implementing The Item Builder</a></h2>\n<p>First, we have to calculate the page index and the index of the item in the page.</p>\n<pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">final</span> pageIndex <span class=\"token operator\">=</span> index <span class=\"token operator\">~/</span> pageSize<span class=\"token punctuation\">;</span><br /><span class=\"token keyword\">final</span> itemIndex <span class=\"token operator\">=</span> index <span class=\"token operator\">%</span> pageSize<span class=\"token punctuation\">;</span></code></pre>\n<p>Then, to get the corresponding page, we can read our <code>itemProvider</code>:</p>\n<pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">final</span> page <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token function\">itemProvider</span><span class=\"token punctuation\">(</span>pageIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code>page</code> is an <code>AsyncValue&lt;List&lt;Item&gt;&gt;</code> object, and it can eiter be loading, contain an error, or contain the items we wanted.\nLet's handle all those different cases:</p>\n<pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">return</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><br />  loading<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token class-name\">LoadingTile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />  error<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'Error: </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">error</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">final</span> items <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span><br />    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> itemIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br />    <span class=\"token punctuation\">}</span><br />    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ItemTile</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> items<span class=\"token punctuation\">[</span>itemIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br /><span class=\"token punctuation\">)</span></code></pre>\n<p><code>LoadingTile</code> will show a shimmer effect while the data is loading. Error handling should look a bit different in a real app,\npossibly offering a <code>retry</code> button and showing the error in a more user-friendly way.</p>\n<h2 id=\"full-example\" tabindex=\"-1\"><a class=\"direct-link\" href=\"https://blog.debertol.com/posts/flutter-infinite-lists/#full-example\">Full Example</a></h2>\n<p>That's already it! I left out some details above that are not relevant for what I wanted to show, but for the sake of completeness I'll provide\na full example below:</p>\n<pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:flutter/material.dart'</span></span><span class=\"token punctuation\">;</span><br /><span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:flutter_riverpod/flutter_riverpod.dart'</span></span><span class=\"token punctuation\">;</span><br /><span class=\"token keyword\">import</span> <span class=\"token string-literal\"><span class=\"token string\">'package:shimmer/shimmer.dart'</span></span><span class=\"token punctuation\">;</span><br /><br /><span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span><br /><br />  <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token keyword\">const</span> pageSize <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><br /><br /><span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fetchItems</span><span class=\"token punctuation\">(</span>int page<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Future</span><span class=\"token punctuation\">.</span><span class=\"token function\">delayed</span><span class=\"token punctuation\">(</span><br />    <span class=\"token keyword\">const</span> <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><br />      <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><br />      <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span><br />        <span class=\"token punctuation\">(</span>page <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token keyword\">final</span> itemProvider <span class=\"token operator\">=</span> <span class=\"token class-name\">FutureProvider</span><span class=\"token punctuation\">.</span>family<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> int<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><br />  <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">final</span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchItems</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />    <span class=\"token keyword\">return</span> items<span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br /><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br /><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token function\">runApp</span><span class=\"token punctuation\">(</span><br />    <span class=\"token keyword\">const</span> <span class=\"token class-name\">ProviderScope</span><span class=\"token punctuation\">(</span><br />      child<span class=\"token punctuation\">:</span> <span class=\"token class-name\">MaterialApp</span><span class=\"token punctuation\">(</span><br />        home<span class=\"token punctuation\">:</span> <span class=\"token class-name\">HomePage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoadingTile</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatelessWidget</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">const</span> <span class=\"token class-name\">LoadingTile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Key</span><span class=\"token operator\">?</span> key<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token metadata function\">@override</span><br />  <span class=\"token class-name\">Widget</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BuildContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ListTile</span><span class=\"token punctuation\">(</span><br />      title<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Shimmer</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromColors</span><span class=\"token punctuation\">(</span><br />        baseColor<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Colors</span><span class=\"token punctuation\">.</span>grey<span class=\"token punctuation\">.</span>shade300<span class=\"token punctuation\">,</span><br />        highlightColor<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Colors</span><span class=\"token punctuation\">.</span>white70<span class=\"token punctuation\">.</span><span class=\"token function\">withOpacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />        child<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Container</span><span class=\"token punctuation\">(</span><br />          width<span class=\"token punctuation\">:</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span><br />          height<span class=\"token punctuation\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span><br />          color<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Colors</span><span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">,</span><br />        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token keyword\">class</span> <span class=\"token class-name\">ItemTile</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatelessWidget</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">final</span> <span class=\"token class-name\">Item</span> item<span class=\"token punctuation\">;</span><br />  <span class=\"token keyword\">const</span> <span class=\"token class-name\">ItemTile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Key</span><span class=\"token operator\">?</span> key<span class=\"token punctuation\">,</span> required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token metadata function\">@override</span><br />  <span class=\"token class-name\">Widget</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BuildContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ListTile</span><span class=\"token punctuation\">(</span><br />      title<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span><br /><br /><span class=\"token keyword\">class</span> <span class=\"token class-name\">HomePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ConsumerWidget</span> <span class=\"token punctuation\">{</span><br />  <span class=\"token keyword\">const</span> <span class=\"token class-name\">HomePage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Key</span><span class=\"token operator\">?</span> key<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><br />  <span class=\"token metadata function\">@override</span><br />  <span class=\"token class-name\">Widget</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BuildContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WidgetRef</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Scaffold</span><span class=\"token punctuation\">(</span><br />      appBar<span class=\"token punctuation\">:</span> <span class=\"token class-name\">AppBar</span><span class=\"token punctuation\">(</span><br />        title<span class=\"token punctuation\">:</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Infinite Scroll Sample\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />      body<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ListView</span><span class=\"token punctuation\">.</span><span class=\"token function\">custom</span><span class=\"token punctuation\">(</span><br />        childrenDelegate<span class=\"token punctuation\">:</span> <span class=\"token class-name\">SliverChildBuilderDelegate</span><span class=\"token punctuation\">(</span><br />          <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />            <span class=\"token keyword\">final</span> pageIndex <span class=\"token operator\">=</span> index <span class=\"token operator\">~/</span> pageSize<span class=\"token punctuation\">;</span><br />            <span class=\"token keyword\">final</span> itemIndex <span class=\"token operator\">=</span> index <span class=\"token operator\">%</span> pageSize<span class=\"token punctuation\">;</span><br />            <span class=\"token keyword\">final</span> page <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token function\">itemProvider</span><span class=\"token punctuation\">(</span>pageIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />            <span class=\"token keyword\">return</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><br />              loading<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">const</span> <span class=\"token class-name\">LoadingTile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />              error<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'Error: </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">error</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />              data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />                <span class=\"token keyword\">final</span> items <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span><br />                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> itemIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br />                  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br />                <span class=\"token punctuation\">}</span><br />                <span class=\"token keyword\">return</span> <span class=\"token class-name\">ItemTile</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">:</span> items<span class=\"token punctuation\">[</span>itemIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br />            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br />        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br />    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  <span class=\"token punctuation\">}</span><br /><span class=\"token punctuation\">}</span></code></pre>\n",
      "date_published": "2022-06-16T00:00:00Z"
    }
  ]
}
